MultiLpLiquidityPool_Test
└── when the protocol wants to create a pool
   ├── when pool is initialized
   │  ├── it should deploy the pool implementation correctly
   │  ├── given initializing the logic contract directly
   │  │  └── it should revert with "initializer-disabled"
   │  ├── given re-initializing an already initialized pool
   │  │  └── it should revert with "already-initialized"
   │  ├── given second attempt to re-initialize
   │  │  └── it should revert again
   │  └── given an unexpected failure
   │     └── it should revert with fallback error
   ├── when liquidity provider registration
   │  ├── it should allow maintainer to register new LP
   │  ├── given sender is not the maintainer
   │  │  └── it should revert with "unauthorized"
   │  └── given LP is already registered
   │     └── it should revert with "already-registered"
   ├── when liquidity provider activation
   │  ├── it should activate LP when no LPs are active
   │  ├── it should activate LP when others are already active
   │  ├── given unregistered sender
   │  │  └── it should revert with "not-registered"
   │  ├── given collateral amount is zero
   │  │  └── it should revert with "zero-collateral"
   │  ├── given undercollateralization at activation
   │  │  └── it should revert with "insufficient-collateral"
   │  ├── given LP already active tries to activate again
   │  │  └── it should revert with "already-active"
   │  └── given querying info for inactive LP
   │     └── it should revert with "inactive-lp"
   ├── when user mint tokens
   │  ├── it should mint synthetic tokens correctly
   │  ├── given mint transaction expired
   │  │  └── it should revert with "expired"
   │  ├── given zero collateral sent
   │  │  └── it should revert with "zero-collateral"
   │  ├── given tokens received lt minExpected
   │  │  └── it should revert with "slippage"
   │  └── it should validate all LPs gt minCollateralRatio after mint
   ├── when user redeem tokens
   │  ├── it should redeem tokens correctly
   │  ├── it should fully redeem user balance
   │  ├── given redeem transaction expired
   │  │  └── it should revert with "expired"
   │  ├── given zero tokens sent
   │  │  └── it should revert with "zero-amount"
   │  ├── given amount exceeds pool balance
   │  │  └── it should revert with "insufficient-liquidity"
   │  └── it should validate LPs' collateralization after redeem
   ├── when LP adds liquidity
   │  ├── it should allow active LP to add liquidity
   │  ├── given LP is inactive
   │  │  └── it should revert with "not-active"
   │  └── given no collateral sent
   │     └── it should revert with "zero-collateral"
   ├── when LP removes liquidity
   │  ├── it should allow LP to remove liquidity
   │  ├── given LP is not active
   │  │  └── it should revert with "not-active"
   │  ├── given no liquidity to withdraw
   │  │  └── it should revert with "nothing-to-withdraw"
   │  ├── given withdrawal exceeds deposit
   │  │  └── it should revert with "exceeds-balance"
   │  └── given post-withdraw collateral lt min
   │     └── it should revert with "below-min-collateral"
   ├── when setting overcollateralization
   │  ├── it should allow LP to set overcollateralization
   │  ├── given LP is not activated
   │  │  └── it should revert
   │  ├── given new OC lt protocol requirement
   │  │  └── it should revert
   │  ├── given position becomes undercollateralized
   │  │  └── it should revert
   ├── when liquidation
   │  ├── it should allow liquidation of undercollateralized LP
   │  ├── it should liquidate all LP positions
   │  ├── given LP is unactive
   │  │  └── it should revert
   │  └── given LP is still collateralized
   │     └── it should revert
      //here
   ├── when LP profits or loss interests are split
   │  ├── it should split lending interests correctly
   │  ├── it should distribute profits among LPs
   │  ├── it should distribute losses among LPs
   │  └── given LPs are undercapitalized
   │     └── it should revert
   ├── when transfer to lending manager
   │  ├── it should allow transfer to lending manager
   │  └── given non-manager sender
   │     └── it should revert
   ├── when transfer pool params are set by maintainer
   │  ├── it should update liquidation reward
   │  ├── given non-maintainer sender
   │  │  └── it should revert
   │  ├── given reward equals 0
   │  │  └── it should revert
   │  ├── given reward gt 100
   │  │  └── it should revert
   │  ├── it should update mint/burn fee
   │  ├── given non-maintainer sets fee
   │  │  └── it should revert
   │  └── given fee gte 100
   │     └── it should revert
   ├── when storage migration
   │  ├── it should allow storage migration
   │  └── given caller is not lending manager
   │     └── it should revert
   ├── when getting trading info from minting
   │  ├── it should return mint quote
   │  ├── given zero collateral amount
   │  │  └── it should revert
   │  └── given insufficient liquidity
   │     └── it should revert
   ├── when getting trading info from redeeming
   │  ├── it should return redeem quote
   │  ├── given no token amount passed
   │  │  └── it should revert
   │  └── given more tokens than available
   │     └── it should revert
   ├── when switching to a new lending module protocol
   │  ├── it should switch to bonus-yield module
   │  ├── it should switch to fee-based lending module
   │  ├── given caller is not manager
   │  │  └── it should revert
   │  └── given too many tokens requested
   │     └── it should revert
   ├── when using lending module with deposit bonus
   │  ├── it should allow mint
   │  ├── it should allow redeem
   │  ├── it should allow add liquidity
   │  ├── it should allow remove liquidity
   │  └── it should allow liquidation
   ├── when using lending module with deposit fees
   │  ├── it should allow mint
   │  ├── it should allow redeem
   │  ├── it should allow add liquidity
   │  ├── it should allow remove liquidity
   │  └── it should allow liquidation
   └── when claiming lending rewards
      ├── it should allow claiming rewards
      ├── given caller is not maintainer
      │  └── it should revert
      ├── given invalid collateral token
      │  └── it should revert
      ├── given wrong bearing token
      │  └── it should revert
      └── given caller not lending manager
         └── it should revert
